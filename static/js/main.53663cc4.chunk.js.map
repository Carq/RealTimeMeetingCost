{"version":3,"sources":["containers/Stopwatcher/index.js","containers/Stopwatcher/Stopwatcher.js","containers/TotalMeetingCost/TotalMeetingCostHook.js","containers/TotalMeetingCost/index.js","containers/ParticipantsList/ParticipantItem/index.js","containers/ParticipantsList/ParticipantItem/ParticipantItem.js","containers/ParticipantsList/index.js","containers/ParticipantsList/ParticipantsList.js","containers/GenerateLink/index.js","containers/GenerateLink/GenerateLink.js","containers/MettingMeter/index.js","containers/MettingMeter/MettingMeter.js","containers/Footer/index.js","containers/Footer/Footer.js","containers/Header/index.js","containers/Header/Header.js","history.js","App.js","serviceWorker.js","index.js"],"names":["Stopwatcher","props","renderTime","timePass","state","time","convertMsToTime","Typography","variant","hours","minutes","seconds","renderButtons","ButtonGroup","color","Button","onClick","startWatcher","stopWatcher","resetWatcher","isTicking","startInterval","newDate","Date","RaiseStartDateChange","setState","startDate","clearInterval","watcherInterval","calculateTimePass","setInterval","parseTime","hour","split","today","getFullYear","getMonth","getDate","timeOnChange","timeInMs","formatToTwoCharsNumber","Math","floor","number","padStart","startTime","parsedDate","Box","display","flexDirection","m","this","startDateOnChange","Component","TotalMeetingCostHook","avgHourlyRate","participantsPerHourlyRate","hourlyRateKey","toFixed","calculateTotalCost","ParticipantItem","nameChanged","e","id","hourlyRate","count","onChange","name","target","value","hourlyRateChanged","newHourlyRate","parseInt","countChanged","newCount","mx","TextField","label","style","margin","width","type","ParticipantsList","participants","participantOnChange","justifyContent","map","item","index","key","changedItem","GenerateLink","link","generateLink","newLink","date","getHours","getMinutes","copy","window","location","origin","alignItems","size","startIcon","marginRight","MettingMeter","changedParticipant","list","countPerHourlyRate","calculateCountPerHourlyRate","participant","parseParticipants","participantsToParse","Array","fill","splited","arrayIndex","i","length","newStartDate","initialParticipants","timePassInMs","Container","className","maxWidth","TotalMeetingCost","Footer","href","Header","align","history","createBrowserHistory","urlPropsQueryConfig","UrlQueryParamTypes","string","App","listen","forceUpdate","Fragment","addUrlProps","Boolean","hostname","match","configureUrlQuery","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53663cc4.chunk.js","sourcesContent":["import Stopwatcher from \"./Stopwatcher\";\r\n\r\nexport default Stopwatcher;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nclass Stopwatch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.startTime) {\r\n      const parsedDate = this.parseTime(props.startTime);\r\n      if (parsedDate) {\r\n        this.RaiseStartDateChange(parsedDate);\r\n        this.state = {\r\n          startDate: parsedDate,\r\n          isTicking: true,\r\n        };\r\n        this.startInterval();\r\n      }\r\n    } else {\r\n      this.state = {};\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        <Box m=\"auto\">{this.renderTime()}</Box>\r\n        <Box m=\"auto\">{this.renderButtons()}</Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTime = () => {\r\n    const { timePass } = this.state;\r\n    const time = this.convertMsToTime(timePass);\r\n\r\n    return (\r\n      <Typography variant=\"h3\">{`${time.hours}:${time.minutes}:${time.seconds}`}</Typography>\r\n    );\r\n  };\r\n\r\n  renderButtons = () => (\r\n    <ButtonGroup variant=\"contained\" color=\"primary\">\r\n      <Button onClick={this.startWatcher}>Start</Button>\r\n      <Button onClick={this.stopWatcher}>Stop</Button>\r\n      <Button onClick={this.resetWatcher}>Reset</Button>\r\n    </ButtonGroup>\r\n  );\r\n\r\n  startWatcher = () => {\r\n    const { isTicking } = this.state;\r\n\r\n    if (isTicking) {\r\n      return;\r\n    }\r\n\r\n    this.startInterval();\r\n    const newDate = new Date();\r\n    this.RaiseStartDateChange(newDate);\r\n    this.setState({\r\n      isTicking: true,\r\n      startDate: newDate,\r\n    });\r\n  };\r\n\r\n  stopWatcher = () => {\r\n    clearInterval(this.watcherInterval);\r\n    this.setState({\r\n      isTicking: false,\r\n    });\r\n  };\r\n\r\n  resetWatcher = () => {\r\n    const newDate = new Date();\r\n    this.RaiseStartDateChange(newDate);\r\n    this.setState(\r\n      {\r\n        startDate: newDate,\r\n      },\r\n      this.calculateTimePass\r\n    );\r\n  };\r\n\r\n  startInterval = () => {\r\n    this.watcherInterval = setInterval(this.calculateTimePass, 100);\r\n  };\r\n\r\n  parseTime = (time) => {\r\n    const hour = time.split(\":\")[0];\r\n    const minutes = time.split(\":\")[1];\r\n    const today = new Date();\r\n\r\n    return new Date(\r\n      today.getFullYear(),\r\n      today.getMonth(),\r\n      today.getDate(),\r\n      hour,\r\n      minutes\r\n    );\r\n  };\r\n\r\n  calculateTimePass = () => {\r\n    const { startDate } = this.state;\r\n    const { timeOnChange } = this.props;\r\n\r\n    let timePass = new Date() - startDate;\r\n    timePass = timePass > 0 ? timePass : 0;\r\n    if (timeOnChange) {\r\n      timeOnChange(timePass);\r\n    }\r\n\r\n    this.setState({\r\n      timePass: timePass > 0 ? timePass : 0,\r\n    });\r\n  };\r\n\r\n  convertMsToTime = (timeInMs) => {\r\n    if (!timeInMs) {\r\n      return {\r\n        hours: \"00\",\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n      };\r\n    }\r\n\r\n    return {\r\n      hours: this.formatToTwoCharsNumber(\r\n        Math.floor((timeInMs / (1000 * 60 * 60)) % 24)\r\n      ),\r\n      minutes: this.formatToTwoCharsNumber(\r\n        Math.floor((timeInMs / 1000 / 60) % 60)\r\n      ),\r\n      seconds: this.formatToTwoCharsNumber(Math.floor((timeInMs / 1000) % 60)),\r\n    };\r\n  };\r\n\r\n  formatToTwoCharsNumber = (number) => `${number}`.padStart(2, \"0\");\r\n\r\n  RaiseStartDateChange(newDate) {\r\n    const { startDateOnChange } = this.props;\r\n\r\n    if (startDateOnChange) {\r\n      startDateOnChange(newDate);\r\n    }\r\n  }\r\n}\r\n\r\nStopwatch.propTypes = {\r\n  timeOnChange: PropTypes.func,\r\n  startDateOnChange: PropTypes.func,\r\n};\r\n\r\nexport default Stopwatch;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nfunction TotalMeetingCostHook(props) {\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\">\r\n      <Box m=\"auto\">{renderTotalCost(props)}</Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction renderTotalCost(avgHourlyRate, props) {\r\n  return (\r\n    <Typography m={5} variant=\"h2\">{`€${calculateTotalCost(\r\n      avgHourlyRate,\r\n      props\r\n    )}`}</Typography>\r\n  );\r\n}\r\n\r\nfunction calculateTotalCost(props) {\r\n  const { timeInMs, participantsPerHourlyRate } = props;\r\n  const msInOneHour = 3600000;\r\n  let avgHourlyRate = 0;\r\n\r\n  for (var hourlyRateKey in participantsPerHourlyRate) {\r\n    avgHourlyRate +=\r\n      (participantsPerHourlyRate[hourlyRateKey] || 0) * (hourlyRateKey || 0);\r\n  }\r\n\r\n  return ((avgHourlyRate / msInOneHour) * timeInMs).toFixed(2);\r\n}\r\n\r\nexport default TotalMeetingCostHook;\r\n","import TotalMeetingCostHook from \"./TotalMeetingCostHook\";\r\n\r\nexport default TotalMeetingCostHook;\r\n","import ParticipantItem from \"./ParticipantItem\";\r\n\r\nexport default ParticipantItem;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass ParticipantItem extends Component {\r\n  nameChanged = e => {\r\n    const { id, hourlyRate, count } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: e.target.value,\r\n      hourlyRate: hourlyRate,\r\n      count: count\r\n    });\r\n  };\r\n\r\n  hourlyRateChanged = e => {\r\n    const { id, name, count } = this.props;\r\n    const newHourlyRate = parseInt(e.target.value) || 0;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: name,\r\n      hourlyRate: newHourlyRate >= 0 ? newHourlyRate : 0,\r\n      count: count\r\n    });\r\n  };\r\n\r\n  countChanged = e => {\r\n    const { id, name, hourlyRate } = this.props;\r\n    const newCount = parseInt(e.target.value) || 0;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: name,\r\n      hourlyRate: hourlyRate,\r\n      count: newCount >= 0 ? newCount : 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, hourlyRate, count } = this.props;\r\n\r\n    return (\r\n      <Box mx=\"auto\">\r\n        <TextField\r\n          label=\"Participant Name\"\r\n          value={name}\r\n          onChange={this.nameChanged}\r\n          style={{ margin: \"4px\", width: \"180px\" }}\r\n        />\r\n        <TextField\r\n          label=\"Hourly Rate (€)\"\r\n          type=\"number\"\r\n          value={hourlyRate}\r\n          onChange={this.hourlyRateChanged}\r\n          style={{ margin: \"4px\", width: \"120px\" }}\r\n        />\r\n        <TextField\r\n          label=\"Count\"\r\n          type=\"number\"\r\n          value={count}\r\n          onChange={this.countChanged}\r\n          style={{ margin: \"4px\", width: \"60px\" }}\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nParticipantItem.propTypes = {\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default ParticipantItem;\r\n","import ParticipantsList from \"./ParticipantsList\";\r\n\r\nexport default ParticipantsList;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ParticipantItem from \"./ParticipantItem\";\r\n\r\nclass ParticipantsList extends Component {\r\n  render() {\r\n    const { participants, participantOnChange } = this.props;\r\n\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" m={2}>\r\n        {participants &&\r\n          participants.map((item, index) => (\r\n            <ParticipantItem\r\n              key={index}\r\n              id={index}\r\n              name={item.name}\r\n              hourlyRate={item.hourlyRate}\r\n              count={item.count}\r\n              onChange={changedItem => participantOnChange(changedItem)}\r\n            />\r\n          ))}\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nParticipantsList.propTypes = {\r\n  participants: PropTypes.array,\r\n  participantOnChange: PropTypes.func\r\n};\r\n\r\nexport default ParticipantsList;\r\n","import GenerateLink from \"./GenerateLink\";\r\n\r\nexport default GenerateLink;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport copy from \"copy-to-clipboard\";\r\n\r\nclass GenerateLink extends Component {\r\n  state = {\r\n    link: null\r\n  };\r\n\r\n  render() {\r\n    const { link } = this.state;\r\n\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"row\" alignItems=\"baseline\">\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          onClick={this.generateLink}\r\n          startIcon={<LinkIcon />}\r\n          color=\"primary\"\r\n          style={{ marginRight: \"4px\" }}\r\n        >\r\n          Generate Link\r\n        </Button>\r\n        {link && (\r\n          <Typography size=\"small\" color=\"secondary\">\r\n            Link has been copied to clipboard.\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  generateLink = () => {\r\n    const { participants, startDate } = this.props;\r\n\r\n    let newLink = \"?\";\r\n\r\n    if (startDate) {\r\n      const date = new Date(startDate);\r\n      newLink += `startTime=${date.getHours()}:${date.getMinutes()}&`;\r\n    }\r\n\r\n    if (participants) {\r\n      newLink += `participants=${participants.map(\r\n        item => `${item.name || \"\"},${item.hourlyRate},${item.count}`\r\n      )}`;\r\n    }\r\n\r\n    copy(window.location.origin + \"/metting-meter\" + newLink);\r\n\r\n    this.setState({\r\n      link: newLink\r\n    });\r\n  };\r\n}\r\n\r\nGenerateLink.propTypes = {\r\n  participants: PropTypes.array,\r\n  startDate: PropTypes.instanceOf(Date)\r\n};\r\n\r\nexport default GenerateLink;\r\n","import MettingMeter from \"./MettingMeter\";\r\n\r\nexport default MettingMeter;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Stopwatcher from \"../Stopwatcher\";\r\nimport TotalMeetingCost from \"../TotalMeetingCost\";\r\nimport ParticipantsList from \"../ParticipantsList\";\r\nimport GenerateLink from \"../GenerateLink\";\r\nimport \"./styles.scss\";\r\n\r\nclass MettingMeter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const initialParticipants = this.parseParticipants(\r\n      props.initialParticipants\r\n    );\r\n\r\n    this.state = {\r\n      timePassInMs: 0,\r\n      startTime: props.startTime,\r\n      participants: initialParticipants,\r\n      countPerHourlyRate: this.calculateCountPerHourlyRate(initialParticipants)\r\n    };\r\n  }\r\n\r\n  participantOnChange = changedParticipant => {\r\n    this.setState(state => {\r\n      const list = state.participants.map((item, index) => {\r\n        if (index === changedParticipant.id) {\r\n          return {\r\n            name: changedParticipant.name,\r\n            hourlyRate: changedParticipant.hourlyRate,\r\n            count: changedParticipant.count\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n\r\n      return {\r\n        participants: list,\r\n        countPerHourlyRate: this.calculateCountPerHourlyRate(list)\r\n      };\r\n    });\r\n  };\r\n\r\n  calculateCountPerHourlyRate = participants => {\r\n    let countPerHourlyRate = {};\r\n\r\n    participants &&\r\n      participants.map(\r\n        participant =>\r\n          (countPerHourlyRate[participant.hourlyRate] =\r\n            participant.count +\r\n            (countPerHourlyRate[participant.hourlyRate] || 0))\r\n      );\r\n\r\n    return countPerHourlyRate;\r\n  };\r\n\r\n  render() {\r\n    const { participants, startTime, startDate, timePassInMs } = this.state;\r\n\r\n    return (\r\n      <Container className=\"metting-metter_container effect\" maxWidth=\"sm\">\r\n        <Box>\r\n          <Box>\r\n            <TotalMeetingCost\r\n              timeInMs={timePassInMs}\r\n              participantsPerHourlyRate={this.state.countPerHourlyRate}\r\n            />\r\n            <Stopwatcher\r\n              startTime={startTime}\r\n              startDateOnChange={this.startDateOnChange}\r\n              timeOnChange={timePass => {\r\n                this.setState({\r\n                  timePassInMs: timePass\r\n                });\r\n              }}\r\n            />\r\n          </Box>\r\n          <ParticipantsList\r\n            participants={participants}\r\n            participantOnChange={this.participantOnChange}\r\n          />\r\n          <GenerateLink\r\n            participants={participants}\r\n            startDate={startDate}\r\n          ></GenerateLink>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  parseParticipants = participantsToParse => {\r\n    if (!participantsToParse) {\r\n      return new Array(3).fill({ hourlyRate: 0, count: 0 });\r\n    }\r\n\r\n    let participants = new Array(3);\r\n    const splited = participantsToParse.split(\",\");\r\n\r\n    let arrayIndex = 0;\r\n    for (let i = 0; i < splited.length; i += 3) {\r\n      participants[arrayIndex++] = {\r\n        name: splited[i],\r\n        hourlyRate: parseInt(splited[i + 1]) || 0,\r\n        count: parseInt(splited[i + 2]) || 0\r\n      };\r\n    }\r\n\r\n    return participants.fill({ hourlyRate: 0, count: 0 }, arrayIndex, 3);\r\n  };\r\n\r\n  startDateOnChange = newStartDate => {\r\n    this.setState({\r\n      startDate: newStartDate\r\n    });\r\n  };\r\n}\r\n\r\nMettingMeter.propTypes = {\r\n  startTime: PropTypes.string\r\n};\r\n\r\nexport default MettingMeter;\r\n","import Footer from \"./Footer\";\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport \"./styles.scss\";\r\n\r\nconst Footer = () => (\r\n  <Box className=\"footer\">\r\n    <Typography variant=\"caption\" className=\"footer__item\">\r\n      <Link color=\"textSecondary\" href=\"https://github.com/Carq/\">\r\n        github.com/Carq\r\n      </Link>\r\n    </Typography>\r\n    -\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      variant=\"caption\"\r\n      className=\"footer__item\"\r\n    >\r\n      \"Lost time is never found again.\" – Benjamin Franklin.\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\nexport default Footer;\r\n","import Header from \"./Header\";\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Header = () => (\r\n  <Box m={1}>\r\n    <Typography variant=\"h3\" align=\"center\" color=\"primary\">\r\n      Meeting Meter\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\nexport default Header;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;\r\n","import React, { Component } from \"react\";\r\nimport MettingMeter from \"./containers/MettingMeter\";\r\nimport Footer from \"./containers/Footer\";\r\nimport Header from \"./containers/Header\";\r\nimport history from \"./history\";\r\nimport { addUrlProps, UrlQueryParamTypes } from \"react-url-query\";\r\n\r\nconst urlPropsQueryConfig = {\r\n  startTime: { type: UrlQueryParamTypes.string },\r\n  participants: { type: UrlQueryParamTypes.string }\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // force an update if the URL changes\r\n    history.listen(() => this.forceUpdate());\r\n  }\r\n\r\n  render() {\r\n    const { startTime, participants } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <MettingMeter\r\n          startTime={startTime}\r\n          initialParticipants={participants}\r\n        />\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default addUrlProps({ urlPropsQueryConfig })(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport history from \"./history\";\r\nimport { configureUrlQuery } from \"react-url-query\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconfigureUrlQuery({ history });\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}