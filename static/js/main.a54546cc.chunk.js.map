{"version":3,"sources":["containers/Header/index.js","containers/Header/Header.js","containers/Stopwatcher/index.js","containers/Stopwatcher/Stopwatcher.js","containers/TotalMeetingCost/index.js","containers/TotalMeetingCost/TotalMeetingCost.js","containers/ProffessionsList/ProffessionSingleItem/index.js","containers/ProffessionsList/ProffessionSingleItem/ProffessionSingleItem.js","containers/ProffessionsList/index.js","containers/ProffessionsList/ProffessionsList.js","App.js","serviceWorker.js","index.js"],"names":["Header","Box","Typography","variant","align","Stopwatcher","state","startTime","isTicking","renderTime","timePass","time","convertMsToTime","hours","minutes","seconds","renderButtons","ButtonGroup","color","Button","onClick","startWatcher","stopWatcher","resetWacher","watcherInterval","setInterval","calculateTimePass","setState","Date","clearInterval","timeOnChange","props","timeInMs","formatToTwoCharsNumber","Math","floor","number","padStart","display","flexDirection","m","this","Component","TotalMeetingCost","avgHourlyRate","renderTotalCost","calculateTotalCost","participantsPerHourlyRate","hourlyRateKey","toFixed","ProffessionSingleItem","nameChanged","e","id","hourlyRate","count","onChange","name","target","value","hourlyRateChanged","parseInt","countChanged","mx","TextField","label","style","margin","width","type","ProffessionsList","proffessions","proffesionChange","changedProffession","map","item","index","merge","calculationOnChange","proffession","justifyContent","key","App","timePassInMs","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a54546cc.chunk.js","sourcesContent":["import Header from \"./Header\";\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Header = () => (\r\n  <Box>\r\n    <Typography variant=\"h2\" align=\"center\">\r\n      Meeting Meter\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\nexport default Header;\r\n","import Stopwatcher from \"./Stopwatcher\";\r\n\r\nexport default Stopwatcher;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nclass Stopwatch extends Component {\r\n  state = {\r\n    startTime: null,\r\n    isTicking: false\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        <Box m=\"auto\">{this.renderTime()}</Box>\r\n        <Box m=\"auto\">{this.renderButtons()}</Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTime = () => {\r\n    const { timePass } = this.state;\r\n    const time = this.convertMsToTime(timePass);\r\n\r\n    return (\r\n      <Typography variant=\"h3\">{`${time.hours}:${time.minutes}:${time.seconds}`}</Typography>\r\n    );\r\n  };\r\n\r\n  renderButtons = () => (\r\n    <ButtonGroup variant=\"contained\" color=\"primary\">\r\n      <Button onClick={this.startWatcher}>Start</Button>\r\n      <Button onClick={this.stopWatcher}>Stop</Button>\r\n      <Button onClick={this.resetWacher}>Reset</Button>\r\n    </ButtonGroup>\r\n  );\r\n\r\n  startWatcher = () => {\r\n    const { isTicking } = this.state;\r\n    if (isTicking) {\r\n      return;\r\n    }\r\n\r\n    this.watcherInterval = setInterval(this.calculateTimePass, 100);\r\n\r\n    this.setState({\r\n      isTicking: true,\r\n      startTime: new Date()\r\n    });\r\n  };\r\n\r\n  stopWatcher = () => {\r\n    clearInterval(this.watcherInterval);\r\n    this.setState({\r\n      isTicking: false\r\n    });\r\n  };\r\n\r\n  resetWacher = () => {\r\n    this.setState({\r\n      startTime: new Date()\r\n    });\r\n  };\r\n\r\n  calculateTimePass = () => {\r\n    const { startTime } = this.state;\r\n    const { timeOnChange } = this.props;\r\n\r\n    const timePass = new Date() - startTime;\r\n\r\n    if (timeOnChange) {\r\n      timeOnChange(timePass);\r\n    }\r\n\r\n    this.setState({\r\n      timePass: timePass\r\n    });\r\n  };\r\n\r\n  convertMsToTime = timeInMs => {\r\n    if (!timeInMs) {\r\n      return {\r\n        hours: \"00\",\r\n        minutes: \"00\",\r\n        seconds: \"00\"\r\n      };\r\n    }\r\n\r\n    return {\r\n      hours: this.formatToTwoCharsNumber(\r\n        Math.floor((timeInMs / (1000 * 60 * 60)) % 24)\r\n      ),\r\n      minutes: this.formatToTwoCharsNumber(\r\n        Math.floor((timeInMs / 1000 / 60) % 60)\r\n      ),\r\n      seconds: this.formatToTwoCharsNumber(Math.floor((timeInMs / 1000) % 60))\r\n    };\r\n  };\r\n\r\n  formatToTwoCharsNumber = number => `${number}`.padStart(2, \"0\");\r\n}\r\n\r\nStopwatch.propTypes = {\r\n  timeOnChange: PropTypes.func\r\n};\r\n\r\nexport default Stopwatch;\r\n","import TotalMeetingCost from \"./TotalMeetingCost\";\r\n\r\nexport default TotalMeetingCost;\r\n","import React, { Component } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nclass TotalMeetingCost extends Component {\r\n  state = {\r\n    avgHourlyRate: 0\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        <Box m=\"auto\">{this.renderTotalCost()}</Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTotalCost = () => {\r\n    return (\r\n      <Typography\r\n        m={5}\r\n        variant=\"h2\"\r\n      >{`€${this.calculateTotalCost()}`}</Typography>\r\n    );\r\n  };\r\n\r\n  calculateTotalCost = () => {\r\n    const { timeInMs, participantsPerHourlyRate } = this.props;\r\n    const msInOneHour = 3600000;\r\n    let avgHourlyRate = 0;\r\n\r\n    for (var hourlyRateKey in participantsPerHourlyRate) {\r\n      avgHourlyRate += participantsPerHourlyRate[hourlyRateKey] * hourlyRateKey;\r\n    }\r\n\r\n    return ((avgHourlyRate / msInOneHour) * timeInMs).toFixed(2);\r\n  };\r\n}\r\n\r\nTotalMeetingCost.propTypes = {\r\n  timeInMs: PropTypes.number,\r\n  participantsPerHourlyRate: PropTypes.object\r\n};\r\n\r\nexport default TotalMeetingCost;\r\n","import ProffessionSingleItem from \"./ProffessionSingleItem\";\r\n\r\nexport default ProffessionSingleItem;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass ProffessionSingleItem extends Component {\r\n  nameChanged = e => {\r\n    const { id, hourlyRate, count } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: e.target.value,\r\n      hourlyRate: hourlyRate,\r\n      count: count\r\n    });\r\n  };\r\n\r\n  hourlyRateChanged = e => {\r\n    const { id, name, count } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: name,\r\n      hourlyRate: parseInt(e.target.value),\r\n      count: count\r\n    });\r\n  };\r\n\r\n  countChanged = e => {\r\n    const { id, name, hourlyRate } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: name,\r\n      hourlyRate: hourlyRate,\r\n      count: parseInt(e.target.value)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, hourlyRate, count } = this.props;\r\n\r\n    return (\r\n      <Box mx=\"auto\">\r\n        <TextField\r\n          label=\"Proffession Name\"\r\n          value={name}\r\n          onChange={this.nameChanged}\r\n          style={{ margin: \"4px\", width: \"160px\" }}\r\n        />\r\n        <TextField\r\n          label=\"Hourly Rate (€)\"\r\n          type=\"number\"\r\n          value={hourlyRate}\r\n          onChange={this.hourlyRateChanged}\r\n          style={{ margin: \"4px\", width: \"120px\" }}\r\n        />\r\n        <TextField\r\n          label=\"Count\"\r\n          type=\"number\"\r\n          value={count}\r\n          onChange={this.countChanged}\r\n          style={{ margin: \"4px\", width: \"100px\" }}\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nProffessionSingleItem.propTypes = {\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default ProffessionSingleItem;\r\n","import ProffessionsList from \"./ProffessionsList\";\r\n\r\nexport default ProffessionsList;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ProffessionSingleItem from \"./ProffessionSingleItem/\";\r\n\r\nclass ProffessionsList extends Component {\r\n  state = {\r\n    proffessions: [\r\n      {\r\n        name: \"Senior Dev\",\r\n        hourlyRate: 30,\r\n        count: 3\r\n      },\r\n      {\r\n        name: \"Medium Dev\",\r\n        hourlyRate: 20,\r\n        count: 4\r\n      },\r\n      {\r\n        name: \"Team Leader\",\r\n        hourlyRate: 35,\r\n        count: 1\r\n      }\r\n    ]\r\n  };\r\n\r\n  render() {\r\n    const { proffessions } = this.state;\r\n\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\r\n        {proffessions.map((item, index) => (\r\n          <ProffessionSingleItem\r\n            key={index}\r\n            id={index}\r\n            name={item.name}\r\n            hourlyRate={item.hourlyRate}\r\n            count={item.count}\r\n            onChange={this.proffesionChange}\r\n          />\r\n        ))}\r\n        <Button>Add</Button>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  proffesionChange = changedProffession => {\r\n    this.setState(state => {\r\n      const list = state.proffessions.map((item, index) => {\r\n        if (index === changedProffession.id) {\r\n          return {\r\n            name: changedProffession.name,\r\n            hourlyRate: changedProffession.hourlyRate,\r\n            count: changedProffession.count\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n\r\n      return { proffessions: list };\r\n    }, this.merge);\r\n  };\r\n\r\n  merge = () => {\r\n    const { proffessions } = this.state;\r\n    const { calculationOnChange } = this.props;\r\n    let participantsPerHourlyRate = {};\r\n\r\n    proffessions.map(\r\n      proffession =>\r\n        (participantsPerHourlyRate[proffession.hourlyRate] =\r\n          proffession.count +\r\n          (participantsPerHourlyRate[proffession.hourlyRate] || 0))\r\n    );\r\n\r\n    if (calculationOnChange) {\r\n      calculationOnChange(participantsPerHourlyRate);\r\n    }\r\n  };\r\n}\r\n\r\nProffessionsList.propTypes = {\r\n  calculationOnChange: PropTypes.func\r\n};\r\n\r\nexport default ProffessionsList;\r\n","import React, { Component } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport Header from \"./containers/Header\";\nimport Stopwatcher from \"./containers/Stopwatcher\";\nimport TotalMeetingCost from \"./containers/TotalMeetingCost\";\nimport ProffessionsList from \"./containers/ProffessionsList\";\n\nclass App extends Component {\n  state = {\n    timePassInMs: 0,\n    participantsPerHourlyRate: {}\n  };\n\n  render() {\n    return (\n      <Container>\n        <Header />\n        <Box>\n          <TotalMeetingCost\n            timeInMs={this.state.timePassInMs}\n            participantsPerHourlyRate={this.state.participantsPerHourlyRate}\n          />\n          <Stopwatcher\n            timeOnChange={timePass => {\n              this.setState({\n                timePassInMs: timePass\n              });\n            }}\n          />\n          <ProffessionsList\n            calculationOnChange={participantsPerHourlyRate =>\n              this.setState({\n                participantsPerHourlyRate: participantsPerHourlyRate\n              })\n            }\n          />\n        </Box>\n      </Container>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}