{"version":3,"sources":["containers/Header/index.js","containers/Header/Header.js","containers/Stopwatcher/index.js","containers/Stopwatcher/Stopwatcher.js","containers/TotalMeetingCost/index.js","containers/TotalMeetingCost/TotalMeetingCost.js","containers/ParticipantsList/ParticipantItem/index.js","containers/ParticipantsList/ParticipantItem/ParticipantItem.js","containers/ParticipantsList/index.js","containers/ParticipantsList/ParticipantsList.js","containers/MettingMeter/index.js","containers/MettingMeter/MettingMeter.js","containers/Footer/index.js","containers/Footer/Footer.js","history.js","App.js","serviceWorker.js","index.js"],"names":["Header","Box","Typography","variant","align","color","Stopwatcher","props","renderTime","timePass","state","time","convertMsToTime","hours","minutes","seconds","renderButtons","ButtonGroup","Button","onClick","startWatcher","stopWatcher","resetWacher","isTicking","startInterval","setState","startTime","Date","clearInterval","watcherInterval","calculateTimePass","setInterval","parseTime","hour","split","today","getFullYear","getMonth","getDate","timeOnChange","timeInMs","formatToTwoCharsNumber","Math","floor","number","padStart","parsedDate","display","flexDirection","m","this","Component","TotalMeetingCost","avgHourlyRate","renderTotalCost","calculateTotalCost","participantsPerHourlyRate","hourlyRateKey","toFixed","ParticipantItem","nameChanged","e","id","hourlyRate","count","onChange","name","target","value","hourlyRateChanged","parseInt","countChanged","mx","TextField","label","style","margin","width","type","ParticipantsList","participants","participantOnChange","justifyContent","map","item","index","key","changedItem","MettingMeter","changedParticipant","list","countPerHourlyRate","calculateCountPerHourlyRate","participant","parseParticipants","participantsToParse","splited","i","length","push","initialParticipants","timePassInMs","Container","className","maxWidth","Footer","Link","href","history","createBrowserHistory","urlPropsQueryConfig","UrlQueryParamTypes","string","App","listen","forceUpdate","Fragment","addUrlProps","Boolean","window","location","hostname","match","configureUrlQuery","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3095234.chunk.js","sourcesContent":["import Header from \"./Header\";\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Header = () => (\r\n  <Box>\r\n    <Typography variant=\"h4\" align=\"center\" color=\"primary\">\r\n      Meeting Meter\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\nexport default Header;\r\n","import Stopwatcher from \"./Stopwatcher\";\r\n\r\nexport default Stopwatcher;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nclass Stopwatch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.startTime) {\r\n      const parsedDate = this.parseTime(props.startTime);\r\n      if (parsedDate) {\r\n        this.state = {\r\n          startTime: parsedDate,\r\n          isTicking: true\r\n        };\r\n        this.startInterval();\r\n      }\r\n    } else {\r\n      this.state = {};\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        <Box m=\"auto\">{this.renderTime()}</Box>\r\n        <Box m=\"auto\">{this.renderButtons()}</Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTime = () => {\r\n    const { timePass } = this.state;\r\n    const time = this.convertMsToTime(timePass);\r\n\r\n    return (\r\n      <Typography variant=\"h3\">{`${time.hours}:${time.minutes}:${time.seconds}`}</Typography>\r\n    );\r\n  };\r\n\r\n  renderButtons = () => (\r\n    <ButtonGroup variant=\"contained\" color=\"primary\">\r\n      <Button onClick={this.startWatcher}>Start</Button>\r\n      <Button onClick={this.stopWatcher}>Stop</Button>\r\n      <Button onClick={this.resetWacher}>Reset</Button>\r\n    </ButtonGroup>\r\n  );\r\n\r\n  startWatcher = () => {\r\n    const { isTicking } = this.state;\r\n\r\n    if (isTicking) {\r\n      return;\r\n    }\r\n\r\n    this.startInterval();\r\n\r\n    this.setState({\r\n      isTicking: true,\r\n      startTime: new Date()\r\n    });\r\n  };\r\n\r\n  stopWatcher = () => {\r\n    clearInterval(this.watcherInterval);\r\n    this.setState({\r\n      isTicking: false\r\n    });\r\n  };\r\n\r\n  resetWacher = () => {\r\n    this.setState(\r\n      {\r\n        startTime: new Date()\r\n      },\r\n      this.calculateTimePass\r\n    );\r\n  };\r\n\r\n  startInterval = () => {\r\n    this.watcherInterval = setInterval(this.calculateTimePass, 100);\r\n  };\r\n\r\n  parseTime = time => {\r\n    const hour = time.split(\":\")[0];\r\n    const minutes = time.split(\":\")[1];\r\n    const today = new Date();\r\n\r\n    return new Date(\r\n      today.getFullYear(),\r\n      today.getMonth(),\r\n      today.getDate(),\r\n      hour,\r\n      minutes\r\n    );\r\n  };\r\n\r\n  calculateTimePass = () => {\r\n    const { startTime } = this.state;\r\n    const { timeOnChange } = this.props;\r\n\r\n    let timePass = new Date() - startTime;\r\n    timePass = timePass > 0 ? timePass : 0;\r\n    if (timeOnChange) {\r\n      timeOnChange(timePass);\r\n    }\r\n\r\n    this.setState({\r\n      timePass: timePass > 0 ? timePass : 0\r\n    });\r\n  };\r\n\r\n  convertMsToTime = timeInMs => {\r\n    if (!timeInMs) {\r\n      return {\r\n        hours: \"00\",\r\n        minutes: \"00\",\r\n        seconds: \"00\"\r\n      };\r\n    }\r\n\r\n    return {\r\n      hours: this.formatToTwoCharsNumber(\r\n        Math.floor((timeInMs / (1000 * 60 * 60)) % 24)\r\n      ),\r\n      minutes: this.formatToTwoCharsNumber(\r\n        Math.floor((timeInMs / 1000 / 60) % 60)\r\n      ),\r\n      seconds: this.formatToTwoCharsNumber(Math.floor((timeInMs / 1000) % 60))\r\n    };\r\n  };\r\n\r\n  formatToTwoCharsNumber = number => `${number}`.padStart(2, \"0\");\r\n}\r\n\r\nStopwatch.propTypes = {\r\n  timeOnChange: PropTypes.func\r\n};\r\n\r\nexport default Stopwatch;\r\n","import TotalMeetingCost from \"./TotalMeetingCost\";\r\n\r\nexport default TotalMeetingCost;\r\n","import React, { Component } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nclass TotalMeetingCost extends Component {\r\n  state = {\r\n    avgHourlyRate: 0\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        <Box m=\"auto\">{this.renderTotalCost()}</Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTotalCost = () => {\r\n    return (\r\n      <Typography\r\n        m={5}\r\n        variant=\"h2\"\r\n      >{`€${this.calculateTotalCost()}`}</Typography>\r\n    );\r\n  };\r\n\r\n  calculateTotalCost = () => {\r\n    const { timeInMs, participantsPerHourlyRate } = this.props;\r\n    const msInOneHour = 3600000;\r\n    let avgHourlyRate = 0;\r\n\r\n    for (var hourlyRateKey in participantsPerHourlyRate) {\r\n      avgHourlyRate += participantsPerHourlyRate[hourlyRateKey] * hourlyRateKey;\r\n    }\r\n\r\n    return ((avgHourlyRate / msInOneHour) * timeInMs).toFixed(2);\r\n  };\r\n}\r\n\r\nTotalMeetingCost.propTypes = {\r\n  timeInMs: PropTypes.number,\r\n  participantsPerHourlyRate: PropTypes.object\r\n};\r\n\r\nexport default TotalMeetingCost;\r\n","import ParticipantItem from \"./ParticipantItem\";\r\n\r\nexport default ParticipantItem;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass ParticipantItem extends Component {\r\n  nameChanged = e => {\r\n    const { id, hourlyRate, count } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: e.target.value,\r\n      hourlyRate: hourlyRate,\r\n      count: count\r\n    });\r\n  };\r\n\r\n  hourlyRateChanged = e => {\r\n    const { id, name, count } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: name,\r\n      hourlyRate: parseInt(e.target.value),\r\n      count: count\r\n    });\r\n  };\r\n\r\n  countChanged = e => {\r\n    const { id, name, hourlyRate } = this.props;\r\n\r\n    this.props.onChange({\r\n      id: id,\r\n      name: name,\r\n      hourlyRate: hourlyRate,\r\n      count: parseInt(e.target.value)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, hourlyRate, count } = this.props;\r\n\r\n    return (\r\n      <Box mx=\"auto\">\r\n        <TextField\r\n          label=\"Participant Name\"\r\n          value={name}\r\n          onChange={this.nameChanged}\r\n          style={{ margin: \"4px\", width: \"180px\" }}\r\n        />\r\n        <TextField\r\n          label=\"Hourly Rate (€)\"\r\n          type=\"number\"\r\n          value={hourlyRate}\r\n          onChange={this.hourlyRateChanged}\r\n          style={{ margin: \"4px\", width: \"120px\" }}\r\n        />\r\n        <TextField\r\n          label=\"Count\"\r\n          type=\"number\"\r\n          value={count}\r\n          onChange={this.countChanged}\r\n          style={{ margin: \"4px\", width: \"100px\" }}\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nParticipantItem.propTypes = {\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default ParticipantItem;\r\n","import ParticipantsList from \"./ParticipantsList\";\r\n\r\nexport default ParticipantsList;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ParticipantItem from \"./ParticipantItem\";\r\n\r\nclass ParticipantsList extends Component {\r\n  render() {\r\n    const { participants, participantOnChange } = this.props;\r\n\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" m={2}>\r\n        {participants &&\r\n          participants.map((item, index) => (\r\n            <ParticipantItem\r\n              key={index}\r\n              id={index}\r\n              name={item.name}\r\n              hourlyRate={item.hourlyRate}\r\n              count={item.count}\r\n              onChange={changedItem => participantOnChange(changedItem)}\r\n            />\r\n          ))}\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nParticipantsList.propTypes = {\r\n  participants: PropTypes.array,\r\n  participantOnChange: PropTypes.func\r\n};\r\n\r\nexport default ParticipantsList;\r\n","import MettingMeter from \"./MettingMeter\";\r\n\r\nexport default MettingMeter;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Header from \"../Header\";\r\nimport Stopwatcher from \"../Stopwatcher\";\r\nimport TotalMeetingCost from \"../TotalMeetingCost\";\r\nimport ParticipantsList from \"../ParticipantsList\";\r\nimport \"./styles.scss\";\r\n\r\nclass MettingMeter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const initialParticipants = this.parseParticipants(\r\n      props.initialParticipants\r\n    );\r\n\r\n    this.state = {\r\n      timePassInMs: 0,\r\n      startTime: props.startTime,\r\n      participants: initialParticipants,\r\n      countPerHourlyRate: this.calculateCountPerHourlyRate(initialParticipants)\r\n    };\r\n  }\r\n\r\n  participantOnChange = changedParticipant => {\r\n    this.setState(state => {\r\n      const list = state.participants.map((item, index) => {\r\n        if (index === changedParticipant.id) {\r\n          return {\r\n            name: changedParticipant.name,\r\n            hourlyRate: changedParticipant.hourlyRate || 0,\r\n            count: changedParticipant.count\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n\r\n      return {\r\n        participants: list,\r\n        countPerHourlyRate: this.calculateCountPerHourlyRate(list)\r\n      };\r\n    });\r\n  };\r\n\r\n  calculateCountPerHourlyRate = participants => {\r\n    let countPerHourlyRate = {};\r\n\r\n    participants &&\r\n      participants.map(\r\n        participant =>\r\n          (countPerHourlyRate[participant.hourlyRate] =\r\n            participant.count +\r\n            (countPerHourlyRate[participant.hourlyRate] || 0))\r\n      );\r\n\r\n    return countPerHourlyRate;\r\n  };\r\n\r\n  render() {\r\n    const { participants, startTime, timePassInMs } = this.state;\r\n\r\n    return (\r\n      <Container className=\"metting-metter_container effect\" maxWidth=\"sm\">\r\n        <Box>\r\n          <Header />\r\n          <Box>\r\n            <TotalMeetingCost\r\n              timeInMs={timePassInMs}\r\n              participantsPerHourlyRate={this.state.countPerHourlyRate}\r\n            />\r\n            <Stopwatcher\r\n              startTime={startTime}\r\n              timeOnChange={timePass => {\r\n                this.setState({\r\n                  timePassInMs: timePass\r\n                });\r\n              }}\r\n            />\r\n          </Box>\r\n          <ParticipantsList\r\n            participants={participants}\r\n            participantOnChange={this.participantOnChange}\r\n          />\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  parseParticipants = participantsToParse => {\r\n    if (!participantsToParse) {\r\n      return [];\r\n    }\r\n\r\n    let participants = [];\r\n    const splited = participantsToParse.split(\",\");\r\n\r\n    for (let i = 0; i < splited.length; i += 3) {\r\n      participants.push({\r\n        name: splited[i],\r\n        hourlyRate: parseInt(splited[i + 1]) || 0,\r\n        count: parseInt(splited[i + 2]) || 0\r\n      });\r\n    }\r\n\r\n    return participants;\r\n  };\r\n}\r\n\r\nMettingMeter.propTypes = {\r\n  startTime: PropTypes.string\r\n};\r\n\r\nexport default MettingMeter;\r\n","import Footer from \"./Footer\";\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport \"./styles.scss\";\r\n\r\nconst Footer = () => (\r\n  <Box className=\"footer\">\r\n    <Typography variant=\"caption\" className=\"footer__item\">\r\n      <Link color=\"textSecondary\" href=\"https://github.com/Carq/\">\r\n        github.com/Carq\r\n      </Link>\r\n    </Typography>\r\n    -\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      variant=\"caption\"\r\n      className=\"footer__item\"\r\n    >\r\n      \"Lost time is never found again.\" – Benjamin Franklin.\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\nexport default Footer;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;\r\n","import React, { Component } from \"react\";\r\nimport MettingMeter from \"./containers/MettingMeter\";\r\nimport Footer from \"./containers/Footer\";\r\nimport history from \"./history\";\r\nimport { addUrlProps, UrlQueryParamTypes } from \"react-url-query\";\r\n\r\nconst urlPropsQueryConfig = {\r\n  startTime: { type: UrlQueryParamTypes.string },\r\n  participants: { type: UrlQueryParamTypes.string }\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // force an update if the URL changes\r\n    history.listen(() => this.forceUpdate());\r\n  }\r\n\r\n  render() {\r\n    const { startTime, participants } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <MettingMeter\r\n          startTime={startTime}\r\n          initialParticipants={participants}\r\n        />\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default addUrlProps({ urlPropsQueryConfig })(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport history from \"./history\";\r\nimport { configureUrlQuery } from \"react-url-query\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconfigureUrlQuery({ history });\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}